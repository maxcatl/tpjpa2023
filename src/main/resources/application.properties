spring.h2.console.enabled=true

logging.level.org.hibernate.SQL=error

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and
# "root" as username and password.
spring.datasource.url = jdbc:mysql://localhost:3306/JPA_one?useUnicode=true&characterEncoding=utf8&allowPublicKeyRetrieval=true&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = root


# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update


# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect

spring.thymeleaf.check-template-location=false

#server port to avoid conflict with keycloak
server.port=8084

#integration with keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:8080/realms/springbootrealm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://localhost:8080/realms/springbootrealm/protocol/openid-connect/certs

spring.security.oauth2.client.registration.keycloak.client-id=springbootapp
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/springbootrealm
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

springdoc.packagesToScan=fr.istic.rest
springdoc.pathsToMatch=/**